/* enclave.edl - Top EDL file. */

enclave {
    
    /* 
     * ocall_enclave_sample - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {

    };

    trusted {
    
        public int generateKeyEnclave([out, size = sealedkey_len] uint8_t *sealed_key, size_t sealedkey_len);
        public int loadKeyEnclave ([in, size = len]  uint8_t *key, size_t len);
    
    	public int enclaveProcess ([user_check]void* inQueue);
    	
    	public int compareRandEncInt (	[in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len,
							[out, size = res_len] uint8_t *reslut, size_t res_len);

		public int addRandEncInt (	[in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len,
							[out, size = int3_len] uint8_t *int3, size_t int3_len);
		public int subsRandEncInt (	[in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len,
							[out, size = int3_len] uint8_t *int3, size_t int3_len);
		public int multRandEncInt (	[in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len,
							[out, size = int3_len] uint8_t *int3, size_t int3_len);
		public int divRandEncInt (	[in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len,
							[out, size = int3_len] uint8_t *int3, size_t int3_len);
		public int modRandEncInt (	[in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len,
							[out, size = int3_len] uint8_t *int3, size_t int3_len);
		public int expRandEncInt (	[in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len,
							[out, size = int3_len] uint8_t *int3, size_t int3_len);
		public int decryptRandEncInt([in, size = int1_len]uint8_t *int1, size_t int1_len,
									[out, size = int2_len]  uint8_t *int2, size_t int2_len);
		public int encryptRandEncInt([in, size = int1_len]uint8_t *int1, size_t int1_len, 
										[out, size = int2_len] uint8_t *int2, size_t int2_len);	
										
										
		public int compareRandEncString (	[in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len);
		public int concatRandEncString (	[in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len,
							[out, size = int3_len] uint8_t *int3, size_t int3_len);
		public int substringRandEncString (	[in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len);
		public int decryptRandEncString([in, size = int1_len]uint8_t *int1, size_t int1_len,
									[out, size = int2_len]  uint8_t *int2, size_t int2_len);
		public int encryptRandEncString([in, size = int1_len]uint8_t *int1, size_t int1_len, 
										[out, size = int2_len] uint8_t *int2, size_t int2_len);
		
			
		
		public float decryptRandEncFloat([in, size = int1_len]uint8_t *int1, size_t int1_len,
									[out, size = int2_len]  uint8_t *int2, size_t int2_len);
		public int encryptRandEncFloat([in, size = int1_len]uint8_t *int1, size_t int1_len, 
										[out, size = int2_len] uint8_t *int2, size_t int2_len);
		public int compareRandEncFloat (	[in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len);
		public int addRandEncFloat (	[in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len,
							[out, size = int3_len] uint8_t *int3, size_t int3_len);
		public int subsRandEncFloat (	[in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len,
							[out, size = int3_len] uint8_t *int3, size_t int3_len);
		public int multRandEncFloat (	[in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len,
							[out, size = int3_len] uint8_t *int3, size_t int3_len);
		public int divRandEncFloat (	[in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len,
							[out, size = int3_len] uint8_t *int3, size_t int3_len);
		
		public int expRandEncFloat ([in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len,
							[out, size = int3_len] uint8_t *int3, size_t int3_len);

		public int modRandEncFloat (	[in, size = int1_len]  uint8_t *int1, size_t int1_len,
							[in, size = int2_len]  uint8_t *int2, size_t int2_len,
							[out, size = int3_len] uint8_t *int3, size_t int3_len);


		public int decryptBytes([in, size = src_len] uint8_t *pSrc, size_t src_len,
									[out, size = dst_len]  uint8_t *pDst, size_t dst_len);
		public int encryptBytes([in, size = src_len] uint8_t *pSrc, size_t src_len,
										[out, size = dst_len]  uint8_t *pDst, size_t dst_len);
		public int compareRandEncTimestamp (	[in, size = src1_len]  uint8_t *src1, size_t src1_len,
							[in, size = src2_len]  uint8_t *src2, size_t src2_len);		
    	    };
};
